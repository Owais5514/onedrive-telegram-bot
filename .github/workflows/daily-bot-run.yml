name: OneDrive Telegram Bot Daily Run

on:
  schedule:
    # Runs daily at 9:00 AM Bangladesh Time (UTC+6, so 3:00 AM UTC)
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 65  # 1 hour + 5 minutes buffer
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create environment file
      run: |
        echo "Creating .env file with secrets..."
        cat > .env << EOF
        # Telegram Bot Token from @BotFather
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        # Azure App Registration details
        AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
        
        # Claude AI API (Optional - for AI file search)
        CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
        
        # Optional: For debugging
        DEBUG=False
        EOF
        
    - name: Verify environment setup
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        echo "Checking environment variables..."
        if [ -z "$AZURE_TENANT_ID" ]; then echo "❌ AZURE_TENANT_ID is missing"; exit 1; fi
        if [ -z "$AZURE_CLIENT_ID" ]; then echo "❌ AZURE_CLIENT_ID is missing"; exit 1; fi  
        if [ -z "$AZURE_CLIENT_SECRET" ]; then echo "❌ AZURE_CLIENT_SECRET is missing"; exit 1; fi
        if [ -z "$TELEGRAM_BOT_TOKEN" ]; then echo "❌ TELEGRAM_BOT_TOKEN is missing"; exit 1; fi
        if [ -z "$CLAUDE_API_KEY" ]; then echo "❌ CLAUDE_API_KEY is missing"; exit 1; fi
        echo "✅ All required environment variables are set"
        echo "🔍 Testing Python and dependencies..."
        python --version
        pip list | grep -E "(telegram|azure|anthropic)"
        
    - name: Run bot for 1 hour
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        DEBUG: false
      run: |
        echo "🚀 Starting OneDrive Telegram Bot at $(date) (Bangladesh Time: $(TZ='Asia/Dhaka' date))"
        echo "Bot will run for 1 hour..."
        
        # Test bot startup first
        echo "🔍 Testing bot startup..."
        timeout 30 python bot_continuous.py &
        TEST_PID=$!
        sleep 10
        
        if kill -0 $TEST_PID 2>/dev/null; then
          echo "✅ Bot startup test successful"
          kill $TEST_PID 2>/dev/null || true
          sleep 5
        else
          echo "❌ Bot failed to start properly"
          exit 1
        fi
        
        # Now run the bot for the full hour
        echo "📱 Starting bot for full 1-hour run..."
        python bot_continuous.py &
        BOT_PID=$!
        
        echo "📱 Bot started with PID: $BOT_PID"
        
        # Wait for 1 hour (3600 seconds)
        sleep 3600
        
        echo "⏰ 1 hour completed. Stopping bot..."
        kill $BOT_PID 2>/dev/null || echo "Bot already stopped"
        
        # Wait a bit for graceful shutdown
        sleep 10
        
        echo "🛑 Bot stopped at $(date) (Bangladesh Time: $(TZ='Asia/Dhaka' date))"
        
    - name: Upload bot logs (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bot-logs-${{ github.run_number }}
        path: |
          *.log
          *.json
        retention-days: 7
        
    - name: Clean up sensitive files
      if: always()
      run: |
        echo "🧹 Cleaning up sensitive files..."
        rm -f .env
        rm -f *.log 2>/dev/null || true
        echo "✅ Cleanup completed"
