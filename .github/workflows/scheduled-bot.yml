name: Scheduled Bot Runner

on:
  schedule:
    # Run every day at 9 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * *'
    # Run every day at 6 PM UTC
    - cron: '0 18 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      schedule_duration:
        description: 'Duration for scheduled run (minutes)'
        required: false
        default: '120'
        type: string

jobs:
  scheduled-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 150  # 2.5 hours maximum
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create environment file
      run: |
        echo "Creating environment file with secrets..."
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
        echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> .env
        echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> .env
        echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> .env
        echo "TARGET_USER_ID=${{ secrets.TARGET_USER_ID }}" >> .env
        echo "ADMIN_USER_ID=${{ secrets.ADMIN_USER_ID }}" >> .env
        echo "DEBUG=True" >> .env
        echo "Environment file created successfully"

    - name: Verify environment configuration
      run: |
        echo "Verifying environment variables are set..."
        if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
          echo "❌ ERROR: TELEGRAM_BOT_TOKEN secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
          echo "❌ ERROR: AZURE_CLIENT_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AZURE_CLIENT_SECRET }}" ]; then
          echo "❌ ERROR: AZURE_CLIENT_SECRET secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
          echo "❌ ERROR: AZURE_TENANT_ID secret is not set"
          echo "Please ensure AZURE_TENANT_ID is configured in repository secrets"
          exit 1
        fi
        if [ -z "${{ secrets.TARGET_USER_ID }}" ]; then
          echo "❌ ERROR: TARGET_USER_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.ADMIN_USER_ID }}" ]; then
          echo "❌ ERROR: ADMIN_USER_ID secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"

    - name: Debug environment variables
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TARGET_USER_ID: ${{ secrets.TARGET_USER_ID }}
        ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
      run: |
        echo "Running environment debug script..."
        python debug_env.py

    - name: Update index if needed
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TARGET_USER_ID: ${{ secrets.TARGET_USER_ID }}
        ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
      run: |
        echo "Checking if index needs update..."
        python indexer.py --stats

    - name: Run scheduled bot session
      timeout-minutes: ${{ fromJSON(github.event.inputs.schedule_duration || '120') }}
      env:
        BOT_RUNTIME_MINUTES: ${{ github.event.inputs.schedule_duration || '120' }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TARGET_USER_ID: ${{ secrets.TARGET_USER_ID }}
        ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
      run: |
        echo "Starting scheduled bot session..."
        python github_runner.py

    - name: Cleanup
      if: always()
      run: |
        rm -f .env
        echo "Scheduled run completed"
